<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/21/hello-world/"/>
    <url>/2024/08/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>竞赛记录汇总</title>
    <link href="/2024/08/19/%E7%AB%9E%E8%B5%9B%E8%AE%B0%E5%BD%95%E6%B1%87%E6%80%BB/"/>
    <url>/2024/08/19/%E7%AB%9E%E8%B5%9B%E8%AE%B0%E5%BD%95%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="数学类"><a href="#数学类" class="headerlink" title="数学类"></a>数学类</h2><h3 id="数学竞赛"><a href="#数学竞赛" class="headerlink" title="数学竞赛"></a>数学竞赛</h3><h3 id="数学建模"><a href="#数学建模" class="headerlink" title="数学建模"></a>数学建模</h3><h2 id="算法类"><a href="#算法类" class="headerlink" title="算法类"></a>算法类</h2><h3 id="CCF-CSP认证"><a href="#CCF-CSP认证" class="headerlink" title="CCF-CSP认证"></a>CCF-CSP认证</h3><h2 id="CTF类"><a href="#CTF类" class="headerlink" title="CTF类"></a>CTF类</h2>]]></content>
    
    
    
    <tags>
      
      <tag>竞赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>保研之路</title>
    <link href="/2024/08/07/%E4%BF%9D%E7%A0%94%E4%B9%8B%E8%B7%AF/"/>
    <url>/2024/08/07/%E4%BF%9D%E7%A0%94%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p>1</p>]]></content>
    
    
    
    <tags>
      
      <tag>保研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新Anaconda安装快捷方式</title>
    <link href="/2024/08/07/%E6%96%B0Anaconda%E5%AE%89%E8%A3%85%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
    <url>/2024/08/07/%E6%96%B0Anaconda%E5%AE%89%E8%A3%85%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p><a href="https://www.anaconda.com/download/success">Anaconda下载地址</a> </p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>近期需要参加CISCN的作品赛国赛，台式放宿舍了，笔记本上重新配了一遍环境，在我下载<a href="https://www.anaconda.com/">Anaconda</a>的时候发现他已经偷偷更新了，不能直接地进行下载，需要点来点去的 。<br><img src="/img/Anaconda1.png" alt="图片" title="点击Free Download"><br>在这里的话就需要填写个邮箱去获取Anaconda给你发的“相关资讯、产品、服务”，说白了就是官方需要你<strong>提供个邮箱接受垃圾邮件</strong>,非常恶心，只有点了下面的框中的同意才能给你下载地址。<br><img src="/img/Anaconda2.png" alt="图片" title="填写邮箱获取下载链接"><br>输入完成了之后就会进入到上面提到的下载地址中。<br><img src="/img/Anaconda3.png" alt="图片" title="毫无意义地跳转到下载"><br>下载之后在安装过程中需要特别注意勾选Install for <strong>Just Me</strong>,不能选ALL Users。选了ALL Users的话创建虚拟环境的时候不会在安装Anaconda的目录env文件下创建，而会在C盘中创建 <strong>.conda</strong>的文件然后在里面安装创建的虚拟环境。<br><img src="/img/Anaconda4.png" alt="图片" title="全点Next即可"><br>创建好虚拟环境后，使用 <code>conda env list</code> 查看环境。<br><img src="/img/Anaconda5.png" alt="图片" title="创建虚拟环境后正确的结果"></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Coding+Github双线部署Hexo</title>
    <link href="/2024/08/07/Coding-Github%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2Hexo/"/>
    <url>/2024/08/07/Coding-Github%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2Hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="Github部署博客"><a href="#Github部署博客" class="headerlink" title="Github部署博客"></a>Github部署博客</h2><p>用GitHub page可以<strong>免费</strong>静态部署博客，非常良心，不过想要流畅查看博客的话需要翻墙。<br>大致流程就是有安装好git，配好ssh的公钥和私钥，创建好仓库和分支，之后就可以hexo d上传本地的资料到博客上，B站上有手把手教学不会的可以去对照着看，这方面的教程网络上太多了不过多赘述。<br>更多资料可以查看官方的文档: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="Coding部署博客"><a href="#Coding部署博客" class="headerlink" title="Coding部署博客"></a>Coding部署博客</h2><p>Coding作为腾讯出品的低配GitHub在我印象中也具有静态部署的功能，所以就打算双线部署加快一下在国内的访问速度。<br>在我配置的时候发现Coding在两年前关闭了免费的静态部署，需要在腾讯云中开启对象存储，查阅之前的官方文档看到可以静态部署博客：<br><img src="/img/coding1.png" alt="图片" title="支持免费静态部署"><br>现在在coding上只有基于主机的持续部署<br><img src="/img/coding2.png" alt="图片" title="主机部署"><br>后来发现官方已经关闭了这个业务，腾讯云不想我们白嫖<br><img src="/img/coding3.png" alt="图片" title="关闭网站托管"><br>现在需要购买存储桶了，这样也会比服务器便宜很多：<br><a href="https://coding.net/help/docs/ci/practice/cloud-storage.html">官方文档</a></p><h2 id="全局config配置"><a href="#全局config配置" class="headerlink" title="全局config配置"></a>全局config配置</h2><p>在网络上查阅了各种资料发现都不能使用hexo d的时候同时成功更新两个仓库，所以就自己看官方文档尝试了一下这种写法，发现是正确的！<br>要注意的是分支，之前的Github部署博客网络上的教程和现版本不同，之前的默认分支名称是”master”,现在将其更改为”main”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs config">deploy:<br>- type: git<br>  repo:<br>    github: https://github.com/lan041221/lan041221.github.io.git,main<br>    coding: git@e.coding.net:g-knec4969/l1nk/l1nk.git,master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ISCC一血记录</title>
    <link href="/2024/08/07/ISCC%E4%B8%80%E8%A1%80%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/08/07/ISCC%E4%B8%80%E8%A1%80%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于ISCC独有的<strong>传播范围广</strong>的特性，导致有很多题目突然间可能就有很多人顿悟从而导致ISCC被业内所诟病，这个比赛基本也很容易就能拿到国奖，其奖项的含金量也无从定义。但是拿一血的含金量是毋庸置疑的，毕竟是全国第一个做出来，这里记录一下拿一血的过程。</p><h3 id="题目：成语学习"><a href="#题目：成语学习" class="headerlink" title="题目：成语学习"></a>题目：成语学习</h3><p>根据流量分析压缩包得到密码为57pmYyWt，丢进虚拟机解，发现是个压缩包<br><img src="/img/ISCC%E4%B8%80%E8%A1%801.png" alt="图片" title="流量分析得到压缩包"></p><p>查看flag在哪，用下面的语句在当前目录及其子目录中搜索名为 flag.txt 的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ find ./* -name flag.txt<br></code></pre></td></tr></table></figure><p><img src="/img/ISCC%E4%B8%80%E8%A1%802.png" alt="图片" title="找到flag.txt"><br>查看里面的内容，上面说不要用食物去加密，食物是英语，文档里面题目是《你信我啊》，这个题叫做《成语学习》。联想到<strong>加salt的哈希算法</strong>用食物（salt）去加密他给的成语<br><img src="/img/ISCC%E4%B8%80%E8%A1%803.png" alt="图片" title="找到flag.txt"><br>接下来在<a href="https://www.uutils.com/enc/hmac_sha.htm">加密解密网站</a>中一个一个的试带盐的加密，最终试到是HmacMD5加密算法<br>最终拿到flag:ISCC{86bd2a65ea0d68bf231dd5c0a9c5e8c1}<br><img src="/img/ISCC%E4%B8%80%E8%A1%804.png" alt="图片" title="成功获得该题flag"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MISC方向的题目通常需要技术常识和工具使用外的<strong>一点灵性脑洞</strong>才能解出题目来。<br>成语学习这个题目也不例外。首先，需要会使用wireshark分析流量拿到密码，然后用命令查找到可能包含flag信息的文件，接着再利用密码基础联想到文本信息的隐藏意思想到其中可能会用到的算法。<br>这是我第一次拿一血，这种快乐是我之前从来没体会过的，有种世界上我最聪明的感觉。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web笔记</title>
    <link href="/2023/08/17/web%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/08/17/web%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是我在打ctf的时候在<a href="https://ctf.show/challenges">ctfshow平台</a>学习web方向的记录，建议配合平台中的题目一起查看。<br>依据本人的学习经验web方向需要依靠大量的知识积累，类似于文科的背诵，再加上对新披露的漏洞的知晓，大部分比赛都是直接拿最新CVE来出题。</p><h2 id="1-信息泄露"><a href="#1-信息泄露" class="headerlink" title="1.信息泄露"></a>1.信息泄露</h2><p>直接查看网页源码，flag可能再被注释掉的内容里面没有显示出来（强制查看：通过在url头部添加 view-source:）web1 web2<br>通过burpsuite抓包 flag在返回的响应数据包里面 web3<br>&#x2F;robots.txt web4<br>phps作为备份文件，泄露了源码（index.phps）web5<br>www源码泄露 web6<br>url&#x2F;.git web7<br>url&#x2F;.svn web8<br>vim缓存泄露，在使用vim进行编辑时，会产生缓存文件，如果意外退出，缓存文件保留下来，这时可以通过缓存文件来得到原文件，以index.php来说，第一次退出后，缓存文件名为 .index.php.swp，第二次退出后，缓存文件名为.index.php.swo，第三次退出后文件名为.index.php.swn web9<br>cookie中也会隐藏数据 web10<br> nslookup -qt&#x3D;txt flag.ctfshow.com 其中有： 非权威应答: flag.ctfshow.com text &#x3D;<br>    “flag{just_seesee}” web11<br>有时候网站上的公开信息，就是管理员常用密码 web12<br>找网站的document，操作指南 web13<br>&#x2F;editor，暴露作者页面直接在url后面添加&#x2F;editor 然后查看flag路径并且访问 web14<br>邮箱会泄露信息 web15<br>php探针url&#x2F;tz.php web16<br>备份的sql文件会泄露敏感信息url&#x2F;backup.sql web17</p><p>—-2023.7.14.  22:25 l1nk</p><h2 id="2-爆破"><a href="#2-爆破" class="headerlink" title="2.爆破"></a>2.爆破</h2><p>爆破的时候，信息可能藏在Authorization中 web21<br>子域名爆破 web22<br>MD5加密 substr()、intval() web23<br>伪随机数 mt_srand()、mt_rand() web24</p><h2 id="3-命令执行"><a href="#3-命令执行" class="headerlink" title="3.命令执行"></a>3.命令执行</h2><p>嵌套eval逃逸函数绕过过滤<br>url + ?c&#x3D;eval($_GET[1]);&amp;1&#x3D;system(‘tac flag.php’);<br>php的filter伪协议，读取文件内容并输出<br>data伪协议，后面直接加执行的代码<br>套娃函数?c&#x3D;eval(array_pop(next(get_defined_vars())));</p><p>—-2023.7.16  1:25 l1nk</p><p>没有学习，打永劫去了</p><p>—-2023.7.17  0:02 l1nk</p><p>ls，cat是系统命令，需要包含在system（“”）中进行执行</p><p>data伪协议<br>payload：<br>url+?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php system("cat fla*.php");?><br>可简写为：url+?c&#x3D;data:,<?php system("cat fla*.php");?></p><p>filter伪协议</p><p>system($c.” &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1”);写入黑洞文件中，利用 命令一；ls来执行命令一<br>当$(())没有参数时。默认为0，0的取反为-1 web57</p><p>—-2023.7.18  2:23 l1nk</p><p>c&#x3D;$a&#x3D;opendir(“.&#x2F;“); while (($file &#x3D; readdir($a)) !&#x3D;&#x3D; false){echo $file . “”; };查看当前目录是否有东西<br>$s &#x3D; ob_get_contents();<br>这一句的作用是定义了一个s变量并把ob_get_contents()返回的输出缓冲区的内容赋值给了s<br>ob_end_clean();<br>这个函数的作用是以字符串格式返回当前输出缓冲区并关闭输出缓冲<br>echo preg_replace(“&#x2F;[0-9]|[a-z]&#x2F;i”,”?”,$s);<br>这一句话是把变量s，即缓冲区内容的所有的数字和字母替换成了为?<br>缓冲区的题目需要在正确命令后面执行exit（）；及时退出才能成功执行<br>PDO连数据库</p><p>—-2023.7.18 16:34 l1nk</p><p>字符拼接，学不了一点，先不学（web118-124）</p><p>—-2023.7.19 17:34 l1nk</p><h2 id="4-文件包含"><a href="#4-文件包含" class="headerlink" title="4.文件包含"></a>4.文件包含</h2><p>nginx原理和日志文件包含，在User-Agent里面写php代码，中间件php-fpm会解析，实现恶意代码。<br>默认路径url?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<br>过滤掉了.的话要用session执行（web82-86）</p><h2 id="5-php"><a href="#5-php" class="headerlink" title="5.php"></a>5.php</h2><p>只检测数字的时候可以用数组绕过（web89）<br>m代表多行匹配（web91）<br>$num&#x3D;4476只匹配num是不是4476，可以用其他任何值绕过，包括4476的十六进制和八进制<br>intval（$num，0）&#x3D;4476表示匹配num的十进制值是否为4476</p><p>干到web100了呜呜呜0.55了，做完几个条件竞争就去睡觉</p><p>当开启session时，服务器会在临时目录下创建session文件来保存会话信息，文件名格式为sess_PHPSESSID。<br>一般开发的web服务会使用多线程接收用户的请求，而线程同步机制确保两个及以上的并发进程或线程不同时执行某些特定的程序段，依靠临界区，session的临界区就是临时目录。<br>如果没有应用好同步技术则会产生“竞争条件”问题。意外生成攻击者想要生成的文件，这样攻击者可以在该文件还未被删除的时间段内进行非法操作。<br>PHP_SESSION_UPLOAD_PROGRESS用于设置&#x2F;tmp目录下生成的sess_PHPSESSID文件的内容<br>使用python脚本进行多线程请求，生成sess_PHPSESSID文件，实现rce<br>脚本链接：<a href="https://blog.csdn.net/weixin_46003360/article/details/119045296">https://blog.csdn.net/weixin_46003360/article/details/119045296</a>  （web82中）<br>—-2023.7.21 1:42 l1nk</p><p>临时文件目录：&#x2F;tmp&#x2F;php??????</p><h2 id="6-文件上传绕过"><a href="#6-文件上传绕过" class="headerlink" title="6.文件上传绕过"></a>6.文件上传绕过</h2><p>php替换为空，可以1.phphpp双写绕过得到1.php写入木马<br>00字符截断：123.php%00.jpg，后台以为是.jpg，文件上传的时候遇到%00就舍弃掉了后面的，以为是.php<br>iconv字符截断：utf-8字符集默认范围在0x00-0x7f，不在这个范围会报异常，后续字符不处理<br>123.php%df.jpg -&gt; 123.php<br>asp解析<br>基于nginx和php-fpm的错误配置：1.txt&#x2F;1.php如果1.php不存在会找前面的1.txt文件进行php解析（私教课43）<br>天呐我的脚本一直被删除（把系统的安全中心关了，安全软件全卸载了就行）<br>—-2023.7.21 21:44 l1nk</p><p>apache多后缀解析漏洞：123.txt.ctf ctf后缀不认识，往前找到txt作为后缀，处理为123.txt<br>伪协议绕过：auto_append_file&#x3D;php:&#x2F;&#x2F;input<br>日志文件绕过：auto_append_file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<br>—-2023.7.22 22:51 l1nk</p><h2 id="7-sql注入"><a href="#7-sql注入" class="headerlink" title="7.sql注入"></a>7.sql注入</h2><p>sql注入，#和– （有个空格）为注释</p><p>—-2023.7.24 21:51 l1nk</p><p>盲注（工作量大）<br>报错注入，用updatexml；<br>见笔记（sql注入笔记day7）<br>—-2023.7.25 21:41 l1nk</p><p>&#x2F;&#x2F;filesystemiterator遍历文件类<br>&#x2F;&#x2F;directoryItrerator遍历目录类<br>—-2023.7.28 14:23 l1nk</p><p>is_file函数可以使用包装器伪协议来绕过，不影响file_get_contents highlight_file<br>is_file认为伪协议不是文件，highlight_file认为伪协议是文件<br>目录溢出会使is_file判断其不是文件，而highlight_file会正常识别<br>—-2023.7.31 22:00 l1nk</p><p>sql注入完了，开始php反序列化<br>—-2023.8.2  13:02 l1nk</p><h2 id="8-反序列化"><a href="#8-反序列化" class="headerlink" title="8.反序列化"></a>8.反序列化</h2><p>当用 &#x3D;&#x3D;&#x3D; 或 !&#x3D;&#x3D; 进行比较时则不进行类型转换，因为此时类型和数值都要比对。<br>$a &#x3D;&#x3D; $b 等于 TRUE，如果类型转换后 $a 等于 $b。<br>$a &#x3D;&#x3D;&#x3D; $b 全等 TRUE，如果 $a 等于 $b，并且它们的类型也相同。<br>$a !&#x3D; $b 不等 TRUE，如果类型转换后 $a 不等于 $b。 </p><p>_()是一个函数<br>_()&#x3D;&#x3D;gettext() 是gettext()的拓展函数，开启text扩展。需要php扩展目录下有php_gettext.dll<br>dnslog怎么又没用，无语了<br>—-2023.8.2  17:58 l1nk</p><p>反序列化，反不了一点<br>—-2023.8.9 20:41 l1nk</p><p>__wakeup() &#x2F;&#x2F;执行unserialize()时，先会调用这个函数<br>__sleep() &#x2F;&#x2F;执行serialize()时，先会调用这个函数<br>__destruct() &#x2F;&#x2F;对象被销毁时触发，当一个对象不再被引用时,PHP会自动销毁该对象,并在销毁之前调用__destruct方法。<br>__call() &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发<br>__callStatic() &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发<br>__get() &#x2F;&#x2F;用于从不可访问的属性读取数据或者不存在这个键都会调用此方法<br>__set() &#x2F;&#x2F;用于将数据写入不可访问的属性<br>__isset() &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发<br>__unset() &#x2F;&#x2F;在不可访问的属性上使用unset()时触发<br>__toString() &#x2F;&#x2F;把类当作字符串使用时触发<br>__invoke() &#x2F;&#x2F;当尝试将对象调用为函数时触发</p><p>php版本：</p><p>​ PHP5 &lt; 5.6.25</p><p>​ PHP7 &lt; 7.0.10<br>序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-string">&#x27;666&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果执行unserialize(‘O:4:”test”:1:{s:1:”a”;s:3:”abc”;}’);输出结果为666</p><p>而把对象属性个数的值增大，1-&gt;2执行unserialize(‘O:4:”test”:2:{s:1:”a”;s:3:”abc”;}’);输出结果为abc</p><p>preg_match(‘&#x2F;^O:\d+&#x2F;‘)匹配序列化字符串是否是对象字符串开头<br>利用加号绕过（注意在url里传参时+要编码为%2B）</p><p>利用引用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b= &amp;<span class="hljs-variable language_">$this</span>-&gt;a;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;a===<span class="hljs-variable language_">$this</span>-&gt;b)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-number">666</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>());<br></code></pre></td></tr></table></figure><p>上面这个例子将$b设置为$a的引用，可以使$a永远与$b相等</p><p>16进制绕过字符的过滤<br>O:4:”test”:2:{s:4:”%00*%00a”;s:3:”abc”;s:7:”%00test%00b”;s:3:”def”;}<br>可以写成<br>O:4:”test”:2:{S:4:”\00*\00\61”;s:3:”abc”;s:7:”%00test%00b”;s:3:”def”;}<br>表示字符类型的s大写时，会被当成16进制解析。</p><p>反序列化的字符逃逸<br>过滤后字符变多：利用引号闭合和大括号闭合，舍弃掉原有的部分序列化后的结果<br>过滤后字符变少：前面少了一半，导致后面的字符被吃掉，从而执行了我们后面的代码<br>—-2023.8.11 20:19 l1nk</p><p>pop链没看懂，和之前的字符拼接之后一起学。<br>—-2023.8.17 13:59 l1nk</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
